{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Option Explicit\
\
' Define Function to Count Unique Tickers\
' Source: https://www.exceltip.com/custom-functions/count-unique-values-using-vba-in-microsoft-excel.html\
Function CountUniqueValues(InputRange As Range) As Integer\
\
    Dim CellValue As Variant, UniqueValues As New Collection\
    \
    Application.Volatile\
    \
    'For error Handling\
    On Error Resume Next\
    \
    'Looping through all the cell in the defined range\
    For Each CellValue In InputRange\
        UniqueValues.Add CellValue, CStr(CellValue)  ' add the unique item\
    Next\
    \
    'Returning the count of number of unique values\
    CountUniqueValues = UniqueValues.Count\
\
End Function\
\
\
' Sub to complete assignment\
Sub StockTest()\
    \
    ' Collection to access sheets (called letters because initial workbook had sheets named as letters\
    Dim letters As New Collection\
    Dim ws As Worksheet\
    \
    For Each ws In Worksheets\
         letters.Add ws.Name\
    Next ws\
    \
    \
    ' Collection to store tickers & volumes & pct changes\
        Dim AllStocks As New Collection\
        Dim AllChanges As New Collection\
        Dim AllVolumes As New Collection\
    \
    ' Declare Variables for number of rows, number of stocks, current sheet, iterator i, range to evaluate unique stocks\
    Dim TotalRows(6) As Double\
    Dim TotalUnique(6) As Double\
    Dim Sheet As String\
    Dim i As Integer\
    Dim tickers As Range\
    \
    ' For loop to count number of rows stocks in each row\
    For i = 1 To letters.Count\
    \
        ' Set active sheet\
            Sheet = letters(i)\
        ' Count unique stocks\
            Set tickers = Worksheets(Sheet).Range("A1", Worksheets(Sheet).Range("A1").End(xlDown))\
        ' Total Fows & number unique\
            TotalRows(i - 1) = tickers.Rows.Count\
            TotalUnique(i - 1) = CountUniqueValues(tickers) - 1\
    \
    Next i\
    \
    \
    ' Declare array for start price, closer price, unique stocks, total volume, pct change and variables for rows & number of stocks\
    Dim startprice() As Double\
    Dim closeprice() As Double\
    Dim stocks() As String\
    Dim volume() As Variant\
    Dim PctChange() As Variant\
    Dim N As Long\
    Dim r As Long\
    \
    ' Counter variable for populating arrays\
    Dim counter As Integer\
    \
    ' Logic to loop through all sheets based on letters collection\
    For i = 1 To letters.Count\
        \
        ' Set active sheet\
        Sheets(letters(i)).Select\
        \
        ' Set nunber of unique stocks & total rows\
           N = TotalUnique(i - 1)\
           r = TotalRows(i - 1)\
        \
        ' Resize arrays for specific sheet size\
            ReDim startprice(N - 1)\
            ReDim stocks(N - 1)\
            ReDim closeprice(N - 1)\
            ReDim volume(N - 1)\
            ReDim PctChange(N - 1)\
        \
        ' Reset counter every for loop\
        counter = 0\
            \
        Dim j As Long\
        \
        ' For loop loops through all rows & counts volume, records start & end price, and holds ticker\
            For j = 2 To r\
            \
                volume(counter) = volume(counter) + Cells(j, 7)\
        \
                \
                If Cells(j, 1) <> Cells(j - 1, 1) Then\
                    startprice(counter) = Cells(j, 3)\
                    stocks(counter) = Cells(j, 1)\
                End If\
                \
                If Cells(j + 1, 1) <> Cells(j, 1) Then\
                \
                    closeprice(counter) = Cells(j, 6)\
                    \
                    ' Conditional logic to avoid divide by 0 error\
                    If startprice(counter) <> 0 Then\
                        PctChange(counter) = (closeprice(counter) - startprice(counter)) / startprice(counter)\
                    Else\
                        PctChange(counter) = 0\
                    End If\
                    counter = counter + 1\
                    \
                End If\
                            \
            Next j\
            \
        ' Headers for summary stats\
            Cells(1, 9) = "Ticker"\
            Cells(1, 10) = "Yearly Change"\
            Cells(1, 11) = "Percent Change"\
            Cells(1, 12) = "Total Stock Volume"\
            \
            \
        ' For loop to populate summary in sheet\
        Dim k As Long\
        \
            For k = 1 To N\
                ' Ticker\
                Cells(k + 1, 9) = stocks(k - 1)\
                \
                ' Add stock to global collection\
                AllStocks.Add stocks(k - 1)\
                \
                ' Change\
                Cells(k + 1, 10) = closeprice(k - 1) - startprice(k - 1)\
                \
                ' % change\
                Cells(k + 1, 11) = PctChange(k - 1)\
                \
                'Add % change to global collection\
                AllChanges.Add PctChange(k - 1)\
                \
                ' format % change\
                Cells(k + 1, 11).NumberFormat = "0.00%"\
                \
                ' Volume\
                Cells(k + 1, 12) = volume(k - 1)\
                \
                ' Add volume to global collection\
                AllVolumes.Add volume(k - 1)\
                \
                ' Conditional formating\
                If Cells(k + 1, 11) > 0 Then\
                    Cells(k + 1, 10).Interior.ColorIndex = 4\
                Else\
                    Cells(k + 1, 10).Interior.ColorIndex = 3\
                End If\
                \
            Next k\
            \
     Next i\
     \
     \
    ' Declare variables for all sheet statistics\
     \
    Dim MaxChange As Double\
    MaxChange = 0\
    Dim MaxChangeStock As String\
    \
    Dim MaxVolume As Double\
    MaxVolume = 0\
    Dim MaxVolumeStock As String\
    \
    Dim MinChange As Double\
    MinChange = 0\
    Dim MinChangeStock As String\
    \
     ' For loop for highest vol, min change, max change\
    Dim l As Long\
    \
        For l = 1 To AllVolumes.Count\
            If AllVolumes(l) > MaxVolume Then\
                MaxVolume = AllVolumes(l)\
                MaxVolumeStock = AllStocks(l)\
            End If\
            \
            If AllChanges(l) > MaxChange Then\
                MaxChange = AllChanges(l)\
                MaxChangeStock = AllStocks(l)\
            End If\
            \
            If AllChanges(l) < MinChange Then\
                MinChange = AllChanges(l)\
                MinChangeStock = AllStocks(l)\
            End If\
    \
    Next l\
    \
    ' Display summary information on first page\
    Sheets(letters(1)).Select\
    \
    Cells(2, 15) = "Greatest % Increase"\
    Cells(3, 15) = "Greatest % Decrease"\
    Cells(4, 15) = "Greatest Total Volume"\
    \
    Cells(1, 16) = "Ticker"\
    Cells(2, 16) = MaxChangeStock\
    Cells(3, 16) = MinChangeStock\
    Cells(4, 16) = MaxVolumeStock\
    \
    Cells(1, 17) = "Value"\
    Cells(2, 17) = MaxChange\
    Cells(2, 17).NumberFormat = "0.00%"\
    \
    Cells(3, 17) = MinChange\
    Cells(3, 17).NumberFormat = "0.00%"\
    \
    Cells(4, 17) = MaxVolume\
    \
\
End Sub\
\
}